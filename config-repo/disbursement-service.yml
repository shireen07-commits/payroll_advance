server:
  port: 8083

spring:
  application:
    name: disbursement-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/payroll_advance_disbursements
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: disbursement-service-group
      auto-offset-reset: earliest
    producer:
      client-id: disbursement-service-producer
  
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  health:
    probes:
      enabled: true

# Application-specific settings
app:
  # Disbursement settings
  disbursement:
    max-retry-attempts: 3
    retry-delay-seconds: 60
    simulation-mode: true  # Set to true to simulate payments without external API
  
  # Payment gateway settings (simulated since we're not using real Stripe)
  payment:
    gateway: SIMULATED  # Options: SIMULATED, STRIPE, etc.
  
  # Kafka topics to listen to and publish events
  kafka:
    topics:
      advance-request-approved: advance-request-approved
      disbursement-initiated: disbursement-initiated
      disbursement-completed: disbursement-completed
      disbursement-failed: disbursement-failed
      notification-requested: notification-requested
  
  # Integration with User Service
  user-service:
    service-name: user-service
    api-path: /api/v1/users
  
  # Integration with existing Node.js application
  nodejs:
    api-url: http://localhost:3000/api
    auth-token: ${NODEJS_AUTH_TOKEN:defaultTokenForDevelopment}